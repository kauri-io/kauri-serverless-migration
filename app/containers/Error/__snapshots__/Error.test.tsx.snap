// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers/Error should match snapshot 1`] = `
<ThemeProvider
  theme={
    Object {
      "DEFAULT_CARD_WIDTH": 288,
      "MAIN_BODY_WIDTH": 1242,
      "bg": Object {
        "bgPrimary": "#1E2428",
        "bgSecondary": "#1E3D3B",
        "borderTextArea": "#979797",
        "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
        "disabledBackgroundColor": "#D6D6D6",
        "disabledTextColor": "#9B9B9B",
        "divider": "#EBEBEB",
        "errorRedColor": "#C03030",
        "hoverTextColor": "#108E72",
        "padding": "calc((100vw - \${props => props.theme.breakpoints[2]}) / 2)",
        "paddingTop": "2.5em",
        "primary": "#0BA986",
        "primaryColor": "#0BA986",
        "primaryDark": "#11856B",
        "primaryTextColor": "#1E2428",
        "secondary": "#11856B",
        "secondaryBlue": "rgb(81, 123, 162, 1)",
        "secondaryBlueDark": "rgb(81, 118, 142, 1)",
        "secondaryColor": "#1E3D3B",
        "secondaryTextColor": "#283035",
        "tertiaryBackgroundColor": "#F7F7F7",
        "textPrimary": "#1E2428",
        "white": "#FFFFFF",
      },
      "bgPrimary": "#1E2428",
      "bgSecondary": "#1E3D3B",
      "borderTextArea": "#979797",
      "breakpoints": Array [
        "500px",
        "52em",
        "1242px",
      ],
      "colors": Object {
        "bgPrimary": "#1E2428",
        "bgSecondary": "#1E3D3B",
        "borderTextArea": "#979797",
        "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
        "disabledBackgroundColor": "#D6D6D6",
        "disabledTextColor": "#9B9B9B",
        "divider": "#EBEBEB",
        "errorRedColor": "#C03030",
        "hoverTextColor": "#108E72",
        "padding": "calc((100vw - \${props => props.theme.breakpoints[2]}) / 2)",
        "paddingTop": "2.5em",
        "primary": "#0BA986",
        "primaryColor": "#0BA986",
        "primaryDark": "#11856B",
        "primaryTextColor": "#1E2428",
        "secondary": "#11856B",
        "secondaryBlue": "rgb(81, 123, 162, 1)",
        "secondaryBlueDark": "rgb(81, 118, 142, 1)",
        "secondaryColor": "#1E3D3B",
        "secondaryTextColor": "#283035",
        "tertiaryBackgroundColor": "#F7F7F7",
        "textPrimary": "#1E2428",
        "white": "#FFFFFF",
      },
      "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
      "disabledBackgroundColor": "#D6D6D6",
      "disabledTextColor": "#9B9B9B",
      "divider": "#EBEBEB",
      "errorRedColor": "#C03030",
      "fontSizes": Array [
        11,
        13,
        14,
        16,
        18,
        20,
        22,
        28,
        32,
      ],
      "fontWeight": Array [
        300,
        "normal",
        500,
        700,
      ],
      "hoverTextColor": "#108E72",
      "padContent": "
    max-width: 1242px;
    margin-left: auto;
    margin-right: auto;
    @media (min-width: 1242px) {
      min-width: 1242px;
    }
    @media (max-width: 1242px) {
      min-width: 90%;
    }
  ",
      "padding": "calc((100vw - 1242px) / 2)",
      "paddingTop": "2.5em",
      "primary": "#0BA986",
      "primaryColor": "#0BA986",
      "primaryDark": "#11856B",
      "primaryTextColor": "#1E2428",
      "secondary": "#11856B",
      "secondaryBlue": "rgb(81, 123, 162, 1)",
      "secondaryBlueDark": "rgb(81, 118, 142, 1)",
      "secondaryColor": "#1E3D3B",
      "secondaryTextColor": "#283035",
      "space": Array [
        0,
        10,
        15,
        30,
        60,
      ],
      "tertiaryBackgroundColor": "#F7F7F7",
      "textPrimary": "#1E2428",
      "white": "#FFFFFF",
    }
  }
>
  <Error>
    <Error__ErrorContainer>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "Error__ErrorContainer-sc-9zpcuf-0",
              "isStatic": false,
              "lastClassName": "ieAeQL",
              "rules": Array [
                "background:",
                [Function],
                ";color:white;display:flex;align-items:center;justify-content:center;flex:1;height:calc(100vh - 133px);flex-direction:column;",
              ],
            },
            "displayName": "Error__ErrorContainer",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "Error__ErrorContainer-sc-9zpcuf-0",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="Error__ErrorContainer-sc-9zpcuf-0 ieAeQL"
        >
          <Error__Code>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Error__Code-sc-9zpcuf-1",
                    "isStatic": true,
                    "lastClassName": "gGjEEd",
                    "rules": Array [
                      "font-size:90px;",
                    ],
                  },
                  "displayName": "Error__Code",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Error__Code-sc-9zpcuf-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="Error__Code-sc-9zpcuf-1 gGjEEd"
              >
                404
              </div>
            </StyledComponent>
          </Error__Code>
          <Error__Copy>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Error__Copy-sc-9zpcuf-2",
                    "isStatic": false,
                    "lastClassName": "hMEIwS",
                    "rules": Array [
                      "font-size:",
                      [Function],
                      "px;margin-bottom:",
                      [Function],
                      "px;",
                    ],
                  },
                  "displayName": "Error__Copy",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Error__Copy-sc-9zpcuf-2",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="Error__Copy-sc-9zpcuf-2 hMEIwS"
              >
                Sorry, something went wrong :(
              </div>
            </StyledComponent>
          </Error__Copy>
          <Link
            as="/"
            href="/"
            prefetch={true}
          >
            <a
              href="/"
              onClick={[Function]}
              onMouseEnter={[Function]}
            >
              <WithStyles(ForwardRef(Button))
                color="primary"
                variant="contained"
              >
                <ForwardRef(Button)
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "root": "MuiButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary",
                      "textSecondary": "MuiButton-textSecondary",
                    }
                  }
                  color="primary"
                  variant="contained"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      type="button"
                    >
                      <button
                        className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                        disabled={false}
                        onBlur={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          Go to homepage
                        </span>
                        <NoSsr>
                          <WithStyles(undefined)
                            center={false}
                          >
                            <ForwardRef(TouchRipple)
                              center={false}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(undefined)>
                        </NoSsr>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </a>
          </Link>
        </div>
      </StyledComponent>
    </Error__ErrorContainer>
  </Error>
</ThemeProvider>
`;
