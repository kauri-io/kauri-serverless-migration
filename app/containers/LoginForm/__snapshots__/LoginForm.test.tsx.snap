// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers/LoginForm should match snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ThemeProvider
    theme={
      Object {
        "DEFAULT_CARD_WIDTH": 288,
        "MAIN_BODY_WIDTH": 1242,
        "bg": Object {
          "bgPrimary": "#1E2428",
          "bgSecondary": "#1E3D3B",
          "borderTextArea": "#979797",
          "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
          "disabledBackgroundColor": "#D6D6D6",
          "disabledTextColor": "#9B9B9B",
          "divider": "#EBEBEB",
          "errorRedColor": "#C03030",
          "hoverTextColor": "#108E72",
          "padding": "calc((100vw - \${props => props.theme.breakpoints[2]}) / 2)",
          "paddingTop": "2.5em",
          "primary": "#0BA986",
          "primaryColor": "#0BA986",
          "primaryDark": "#11856B",
          "primaryTextColor": "#1E2428",
          "secondary": "#11856B",
          "secondaryBlue": "rgb(81, 123, 162, 1)",
          "secondaryBlueDark": "rgb(81, 118, 142, 1)",
          "secondaryColor": "#1E3D3B",
          "secondaryTextColor": "#283035",
          "tertiaryBackgroundColor": "#F7F7F7",
          "textPrimary": "#1E2428",
          "white": "#FFFFFF",
        },
        "bgPrimary": "#1E2428",
        "bgSecondary": "#1E3D3B",
        "borderTextArea": "#979797",
        "breakpoints": Array [
          "500px",
          "52em",
          "1242px",
        ],
        "colors": Object {
          "bgPrimary": "#1E2428",
          "bgSecondary": "#1E3D3B",
          "borderTextArea": "#979797",
          "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
          "disabledBackgroundColor": "#D6D6D6",
          "disabledTextColor": "#9B9B9B",
          "divider": "#EBEBEB",
          "errorRedColor": "#C03030",
          "hoverTextColor": "#108E72",
          "padding": "calc((100vw - \${props => props.theme.breakpoints[2]}) / 2)",
          "paddingTop": "2.5em",
          "primary": "#0BA986",
          "primaryColor": "#0BA986",
          "primaryDark": "#11856B",
          "primaryTextColor": "#1E2428",
          "secondary": "#11856B",
          "secondaryBlue": "rgb(81, 123, 162, 1)",
          "secondaryBlueDark": "rgb(81, 118, 142, 1)",
          "secondaryColor": "#1E3D3B",
          "secondaryTextColor": "#283035",
          "tertiaryBackgroundColor": "#F7F7F7",
          "textPrimary": "#1E2428",
          "white": "#FFFFFF",
        },
        "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
        "disabledBackgroundColor": "#D6D6D6",
        "disabledTextColor": "#9B9B9B",
        "divider": "#EBEBEB",
        "errorRedColor": "#C03030",
        "fontSizes": Array [
          11,
          13,
          14,
          16,
          18,
          20,
          22,
          28,
          32,
        ],
        "fontWeight": Array [
          300,
          "normal",
          500,
          700,
        ],
        "hoverTextColor": "#108E72",
        "padContent": "
    max-width: 1242px;
    margin-left: auto;
    margin-right: auto;
    @media (min-width: 1242px) {
      min-width: 1242px;
    }
    @media (max-width: 1242px) {
      min-width: 90%;
    }
  ",
        "padding": "calc((100vw - 1242px) / 2)",
        "paddingTop": "2.5em",
        "primary": "#0BA986",
        "primaryColor": "#0BA986",
        "primaryDark": "#11856B",
        "primaryTextColor": "#1E2428",
        "secondary": "#11856B",
        "secondaryBlue": "rgb(81, 123, 162, 1)",
        "secondaryBlueDark": "rgb(81, 118, 142, 1)",
        "secondaryColor": "#1E3D3B",
        "secondaryTextColor": "#283035",
        "space": Array [
          0,
          10,
          15,
          30,
          60,
        ],
        "tertiaryBackgroundColor": "#F7F7F7",
        "textPrimary": "#1E2428",
        "white": "#FFFFFF",
      }
    }
  >
    <MockedProvider
      addTypename={true}
    >
      <ApolloProvider
        client={
          ApolloClient {
            "__operations_cache__": Map {},
            "cache": InMemoryCache {
              "addTypename": true,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
            "clearStoreCallbacks": Array [],
            "clientAwareness": Object {},
            "defaultOptions": Object {},
            "disableNetworkFetches": false,
            "link": ApolloLink {
              "request": [Function],
            },
            "mutate": [Function],
            "query": [Function],
            "queryDeduplication": true,
            "reFetchObservableQueries": [Function],
            "resetStore": [Function],
            "resetStoreCallbacks": Array [],
            "ssrMode": false,
            "store": DataStore {
              "cache": InMemoryCache {
                "addTypename": true,
                "cacheKeyRoot": KeyTrie {
                  "weakness": true,
                },
                "config": Object {
                  "addTypename": true,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "freezeResults": false,
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimisticData": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "executeSubSelectedArray": [Function],
                  "freezeResults": false,
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Map {},
                "watches": Set {},
              },
            },
            "version": "2.4.13",
            "watchQuery": [Function],
          }
        }
      >
        <Connect(WithFormik(LoginFormContainer))
          registerAction={[MockFunction]}
        >
          <WithFormik(LoginFormContainer)
            registerAction={[Function]}
            showNotificationAction={[Function]}
          >
            <Formik
              enableReinitialize={false}
              handleSubmit={[Function]}
              initialValues={Object {}}
              isInitialValid={false}
              onSubmit={[Function]}
              registerAction={[Function]}
              render={[Function]}
              showNotificationAction={[Function]}
              validateOnBlur={true}
              validateOnChange={true}
            >
              <LoginFormContainer
                dirty={false}
                errors={Object {}}
                handleBlur={[Function]}
                handleChange={[Function]}
                handleReset={[Function]}
                handleSubmit={[Function]}
                initialValues={Object {}}
                isSubmitting={false}
                isValid={false}
                isValidating={false}
                registerAction={[Function]}
                registerField={[Function]}
                resetForm={[Function]}
                setError={[Function]}
                setErrors={[Function]}
                setFieldError={[Function]}
                setFieldTouched={[Function]}
                setFieldValue={[Function]}
                setFormikState={[Function]}
                setStatus={[Function]}
                setSubmitting={[Function]}
                setTouched={[Function]}
                setValues={[Function]}
                showNotificationAction={[Function]}
                submitCount={0}
                submitForm={[Function]}
                touched={Object {}}
                unregisterField={[Function]}
                validateField={[Function]}
                validateForm={[Function]}
                validateOnBlur={true}
                validateOnChange={true}
                values={Object {}}
              >
                <Web3Unavailable>
                  <View__LoginContainer>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "View__LoginContainer-v8ha34-1",
                            "isStatic": false,
                            "lastClassName": "ikCtyG",
                            "rules": Array [
                              "display:flex;flex-direction:column;align-items:center;text-align:center;justify-content:center;& > *{margin:",
                              [Function],
                              "px;}& #mc_embed_signup{width:400px;color:",
                              [Function],
                              ";padding:",
                              [Function],
                              "px;border-radius:4px;margin-top:",
                              [Function],
                              "px;}",
                            ],
                          },
                          "displayName": "View__LoginContainer",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "View__LoginContainer-v8ha34-1",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="View__LoginContainer-v8ha34-1 ikCtyG"
                      >
                        <Typography__styledComponent
                          color="white"
                        >
                          <StyledComponent
                            color="white"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "Typography__styledComponent-sc-36xkf6-5",
                                  "isStatic": false,
                                  "lastClassName": "jNVtUZ",
                                  "rules": Array [
                                    "color:",
                                    [Function],
                                    ";margin:0px;font-weight:",
                                    "500",
                                    ";",
                                    ";font-size:",
                                    "20",
                                    "px;text-transform:",
                                    [Function],
                                    ";text-align:",
                                    [Function],
                                    ";:hover{color:",
                                    [Function],
                                    ";cursor:",
                                    [Function],
                                    ";}",
                                  ],
                                },
                                "displayName": "Typography__styledComponent",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "Typography__styledComponent-sc-36xkf6-5",
                                "target": "span",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <span
                              className="Typography__styledComponent-sc-36xkf6-5 jNVtUZ"
                              color="white"
                            >
                              Web3 Sign in
                            </span>
                          </StyledComponent>
                        </Typography__styledComponent>
                        <Typography__component
                          color="white"
                        >
                          <StyledComponent
                            color="white"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "Typography__component-sc-36xkf6-3",
                                  "isStatic": true,
                                  "lastClassName": "cGrhPv",
                                  "rules": Array [
                                    "font-size:17px;font-weight:normal;letter-spacing:-0.1px;line-height:24px;",
                                  ],
                                },
                                "displayName": "Typography__component",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "Typography__component-sc-36xkf6-3",
                                "target": "span",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <span
                              className="Typography__component-sc-36xkf6-3 cGrhPv"
                              color="white"
                            >
                              You need the MetaMask extension to use Kauri. (MetaMask supports Chrome, Firefox, Opera)
                            </span>
                          </StyledComponent>
                        </Typography__component>
                        <View__Image
                          src="/static/images/metamask/avatar.png"
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "View__Image-v8ha34-2",
                                  "isStatic": false,
                                  "lastClassName": "jKbdBy",
                                  "rules": Array [
                                    "width:100px;height:91px;margin:",
                                    [Function],
                                    "px;",
                                  ],
                                },
                                "displayName": "View__Image",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "View__Image-v8ha34-2",
                                "target": "img",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            src="/static/images/metamask/avatar.png"
                          >
                            <img
                              className="View__Image-v8ha34-2 jKbdBy"
                              src="/static/images/metamask/avatar.png"
                            />
                          </StyledComponent>
                        </View__Image>
                        <a
                          href="https://metamask.io"
                          target="_blank"
                        >
                          https://metamask.io
                        </a>
                        <div>
                          Here for the content? Sign up for a newsletter below and receive the latest Web3 tutorials, project announcements, and articles every 2 weeks!
                        </div>
                        <link
                          href="//cdn-images.mailchimp.com/embedcode/classic-10_7.css"
                          rel="stylesheet"
                          type="text/css"
                        />
                        <style
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "	#mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; }",
                            }
                          }
                          type="text/css"
                        />
                        <div
                          id="mc_embed_signup"
                        >
                          <form
                            action="https://kauri.us17.list-manage.com/subscribe/post?u=e46233ccfd6bb938ab7cbb5a3&id=f49f81a2a9"
                            className="validate"
                            id="mc-embedded-subscribe-form"
                            method="post"
                            name="mc-embedded-subscribe-form"
                            noValidate={true}
                            target="_blank"
                          >
                            <div
                              id="mc_embed_signup_scroll"
                            >
                              <div
                                className="indicates-required"
                              >
                                <span
                                  className="asterisk"
                                >
                                  *
                                </span>
                                 indicates required
                              </div>
                              <div
                                className="mc-field-group"
                              >
                                <label
                                  htmlFor="mce-EMAIL"
                                >
                                  Email Address 
                                  <span
                                    className="asterisk"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  className="required email"
                                  id="mce-EMAIL"
                                  name="EMAIL"
                                  type="email"
                                />
                              </div>
                              <div
                                className="clear"
                                id="mce-responses"
                              >
                                <div
                                  className="response"
                                  id="mce-error-response"
                                  style={
                                    Object {
                                      "display": "none",
                                    }
                                  }
                                />
                                <div
                                  className="response"
                                  id="mce-success-response"
                                  style={
                                    Object {
                                      "display": "none",
                                    }
                                  }
                                />
                              </div>
                              <div
                                aria-hidden="true"
                                style={
                                  Object {
                                    "left": "-5000px",
                                    "position": "absolute",
                                  }
                                }
                              >
                                <input
                                  defaultValue=""
                                  name="b_e46233ccfd6bb938ab7cbb5a3_f49f81a2a9"
                                  tabIndex={-1}
                                  type="text"
                                />
                              </div>
                              <div
                                className="clear"
                              >
                                <input
                                  className="button"
                                  defaultValue="Subscribe"
                                  id="mc-embedded-subscribe"
                                  name="subscribe"
                                  type="submit"
                                />
                              </div>
                            </div>
                          </form>
                        </div>
                        <script
                          src="//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js"
                          type="text/javascript"
                        />
                        <script
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';}(jQuery));var $mcj = jQuery.noConflict(true);",
                            }
                          }
                          type="text/javascript"
                        />
                      </div>
                    </StyledComponent>
                  </View__LoginContainer>
                </Web3Unavailable>
              </LoginFormContainer>
            </Formik>
          </WithFormik(LoginFormContainer)>
        </Connect(WithFormik(LoginFormContainer))>
      </ApolloProvider>
    </MockedProvider>
  </ThemeProvider>
</Provider>
`;
