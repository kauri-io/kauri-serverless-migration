// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/Moda/AlertView should match snapshot 1`] = `
<ThemeProvider
  theme={
    Object {
      "DEFAULT_CARD_WIDTH": 288,
      "MAIN_BODY_WIDTH": 1242,
      "bg": Object {
        "bgPrimary": "#1E2428",
        "bgSecondary": "#1E3D3B",
        "borderTextArea": "#979797",
        "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
        "disabledBackgroundColor": "#D6D6D6",
        "disabledTextColor": "#9B9B9B",
        "divider": "#EBEBEB",
        "errorRedColor": "#C03030",
        "hoverTextColor": "#108E72",
        "padding": "calc((100vw - \${props => props.theme.breakpoints[2]}) / 2)",
        "paddingTop": "2.5em",
        "primary": "#0BA986",
        "primaryColor": "#0BA986",
        "primaryDark": "#11856B",
        "primaryTextColor": "#1E2428",
        "secondary": "#11856B",
        "secondaryBlue": "rgb(81, 123, 162, 1)",
        "secondaryBlueDark": "rgb(81, 118, 142, 1)",
        "secondaryColor": "#1E3D3B",
        "secondaryTextColor": "#283035",
        "tertiaryBackgroundColor": "#F7F7F7",
        "textPrimary": "#1E2428",
        "white": "#FFFFFF",
      },
      "bgPrimary": "#1E2428",
      "bgSecondary": "#1E3D3B",
      "borderTextArea": "#979797",
      "breakpoints": Array [
        "500px",
        "52em",
        "1242px",
      ],
      "colors": Object {
        "bgPrimary": "#1E2428",
        "bgSecondary": "#1E3D3B",
        "borderTextArea": "#979797",
        "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
        "disabledBackgroundColor": "#D6D6D6",
        "disabledTextColor": "#9B9B9B",
        "divider": "#EBEBEB",
        "errorRedColor": "#C03030",
        "hoverTextColor": "#108E72",
        "padding": "calc((100vw - \${props => props.theme.breakpoints[2]}) / 2)",
        "paddingTop": "2.5em",
        "primary": "#0BA986",
        "primaryColor": "#0BA986",
        "primaryDark": "#11856B",
        "primaryTextColor": "#1E2428",
        "secondary": "#11856B",
        "secondaryBlue": "rgb(81, 123, 162, 1)",
        "secondaryBlueDark": "rgb(81, 118, 142, 1)",
        "secondaryColor": "#1E3D3B",
        "secondaryTextColor": "#283035",
        "tertiaryBackgroundColor": "#F7F7F7",
        "textPrimary": "#1E2428",
        "white": "#FFFFFF",
      },
      "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
      "disabledBackgroundColor": "#D6D6D6",
      "disabledTextColor": "#9B9B9B",
      "divider": "#EBEBEB",
      "errorRedColor": "#C03030",
      "fontSizes": Array [
        11,
        13,
        14,
        16,
        18,
        20,
        22,
        28,
        32,
      ],
      "fontWeight": Array [
        300,
        "normal",
        500,
        700,
      ],
      "hoverTextColor": "#108E72",
      "padContent": "
    max-width: 1242px;
    margin-left: auto;
    margin-right: auto;
    @media (min-width: 1242px) {
      min-width: 1242px;
    }
    @media (max-width: 1242px) {
      min-width: 90%;
    }
  ",
      "padding": "calc((100vw - 1242px) / 2)",
      "paddingTop": "2.5em",
      "primary": "#0BA986",
      "primaryColor": "#0BA986",
      "primaryDark": "#11856B",
      "primaryTextColor": "#1E2428",
      "secondary": "#11856B",
      "secondaryBlue": "rgb(81, 123, 162, 1)",
      "secondaryBlueDark": "rgb(81, 118, 142, 1)",
      "secondaryColor": "#1E3D3B",
      "secondaryTextColor": "#283035",
      "space": Array [
        0,
        10,
        15,
        30,
        60,
      ],
      "tertiaryBackgroundColor": "#F7F7F7",
      "textPrimary": "#1E2428",
      "white": "#FFFFFF",
    }
  }
>
  <AlertViewComponent
    closeModalAction={[MockFunction]}
    confirmButtonAction={[MockFunction]}
    content={
      <div>
        Test
      </div>
    }
    title="test"
  >
    <AlertView__Container>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "AlertView__Container-sc-3bl8oo-0",
              "isStatic": true,
              "lastClassName": "bxVYPz",
              "rules": Array [
                "display:flex;flex-direction:column;min-height:120px;justify-content:center;align-items:center;",
              ],
            },
            "displayName": "AlertView__Container",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "AlertView__Container-sc-3bl8oo-0",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="AlertView__Container-sc-3bl8oo-0 bxVYPz"
        >
          <AlertView__TitleContainer>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "AlertView__TitleContainer-sc-3bl8oo-1",
                    "isStatic": true,
                    "lastClassName": "gnLUsN",
                    "rules": Array [
                      "display:flex;text-align:center;justify-content:center;> *{text-align:center;}",
                    ],
                  },
                  "displayName": "AlertView__TitleContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "AlertView__TitleContainer-sc-3bl8oo-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="AlertView__TitleContainer-sc-3bl8oo-1 gnLUsN"
              >
                <Typography__styledComponent>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Typography__styledComponent-sc-36xkf6-5",
                          "isStatic": false,
                          "lastClassName": "eLGQne",
                          "rules": Array [
                            "color:",
                            [Function],
                            ";margin:0px;font-weight:",
                            "500",
                            ";",
                            ";font-size:",
                            "20",
                            "px;text-transform:",
                            [Function],
                            ";text-align:",
                            [Function],
                            ";:hover{color:",
                            [Function],
                            ";cursor:",
                            [Function],
                            ";}",
                          ],
                        },
                        "displayName": "Typography__styledComponent",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Typography__styledComponent-sc-36xkf6-5",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <span
                      className="Typography__styledComponent-sc-36xkf6-5 eLGQne"
                    >
                      test
                    </span>
                  </StyledComponent>
                </Typography__styledComponent>
              </div>
            </StyledComponent>
          </AlertView__TitleContainer>
          <div>
            Test
          </div>
          <AlertView__Footer>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "AlertView__Footer-sc-3bl8oo-2",
                    "isStatic": false,
                    "lastClassName": "dBGTTY",
                    "rules": Array [
                      "display:flex;flex-direction:row;margin-top:auto;align-self:center;justify-content:space-between;width:100%;>:first-child{margin-right:",
                      [Function],
                      "px;}",
                    ],
                  },
                  "displayName": "AlertView__Footer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "AlertView__Footer-sc-3bl8oo-2",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="AlertView__Footer-sc-3bl8oo-2 dBGTTY"
              >
                <SecondaryButtonComponent
                  border="hoverTextColor"
                  color="textPrimary"
                  onClick={[Function]}
                >
                  <SecondaryButton
                    bg="transparent"
                    border="hoverTextColor"
                    borderHover="primary"
                    color="textPrimary"
                    fontSize={0}
                    fontWeight={700}
                    mr={2}
                    onClick={[Function]}
                    type="button"
                  >
                    <StyledComponent
                      bg="transparent"
                      border="hoverTextColor"
                      borderHover="primary"
                      color="textPrimary"
                      fontSize={0}
                      fontWeight={700}
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "SecondaryButton-sy4hb2-0",
                            "isStatic": false,
                            "lastClassName": "jBRWmt",
                            "rules": Array [
                              "display:flex;align-items:center;justify-content:center;min-width:136px;max-width:150px;",
                              [Function],
                              ";height:40px;border-radius:4px;border:none;cursor:pointer;> svg,img{height:16px;",
                              [Function],
                              ";}text-transform:uppercase;opacity:",
                              [Function],
                              ";",
                              [Function],
                              ";",
                              [Function],
                              ";",
                              [Function],
                              ";",
                              [Function],
                              ";:hover{cursor:",
                              [Function],
                              ";}",
                              ";box-shadow:0px 0px 0px 1px ",
                              [Function],
                              ";:hover{box-shadow:0px 0px 0px 2px ",
                              [Function],
                              ";}",
                            ],
                          },
                          "displayName": "SecondaryButton",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "SecondaryButton-sy4hb2-0",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      mr={2}
                      onClick={[Function]}
                      type="button"
                    >
                      <button
                        className="SecondaryButton-sy4hb2-0 jBRWmt"
                        color="textPrimary"
                        fontSize={0}
                        fontWeight={700}
                        onClick={[Function]}
                        type="button"
                      >
                        Cancel
                      </button>
                    </StyledComponent>
                  </SecondaryButton>
                </SecondaryButtonComponent>
                <PrimaryButtonComponent
                  onClick={[Function]}
                >
                  <PrimaryButton
                    bg="primary"
                    color="white"
                    fontSize={0}
                    fontWeight={700}
                    mr={2}
                    onClick={[Function]}
                    type="submit"
                  >
                    <StyledComponent
                      bg="primary"
                      color="white"
                      fontSize={0}
                      fontWeight={700}
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "PrimaryButton-sc-1cbxa53-0",
                            "isStatic": false,
                            "lastClassName": "gGcsYX",
                            "rules": Array [
                              "display:flex;align-items:center;justify-content:center;min-width:136px;max-width:150px;",
                              [Function],
                              ";height:40px;border-radius:4px;border:none;cursor:pointer;> svg,img{height:16px;",
                              [Function],
                              ";}text-transform:uppercase;opacity:",
                              [Function],
                              ";",
                              [Function],
                              ";",
                              [Function],
                              ";",
                              [Function],
                              ";",
                              [Function],
                              ";:hover{cursor:",
                              [Function],
                              ";}",
                              ";:hover{background-color:",
                              [Function],
                              ";}",
                            ],
                          },
                          "displayName": "PrimaryButton",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "PrimaryButton-sc-1cbxa53-0",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      mr={2}
                      onClick={[Function]}
                      type="submit"
                    >
                      <button
                        className="PrimaryButton-sc-1cbxa53-0 gGcsYX"
                        color="white"
                        fontSize={0}
                        fontWeight={700}
                        onClick={[Function]}
                        type="submit"
                      >
                        Confirm
                      </button>
                    </StyledComponent>
                  </PrimaryButton>
                </PrimaryButtonComponent>
              </div>
            </StyledComponent>
          </AlertView__Footer>
        </div>
      </StyledComponent>
    </AlertView__Container>
  </AlertViewComponent>
</ThemeProvider>
`;

exports[`components/Modal/ChooseArticleContent should match snapshot 1`] = `
<ThemeProvider
  theme={
    Object {
      "DEFAULT_CARD_WIDTH": 288,
      "MAIN_BODY_WIDTH": 1242,
      "bg": Object {
        "bgPrimary": "#1E2428",
        "bgSecondary": "#1E3D3B",
        "borderTextArea": "#979797",
        "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
        "disabledBackgroundColor": "#D6D6D6",
        "disabledTextColor": "#9B9B9B",
        "divider": "#EBEBEB",
        "errorRedColor": "#C03030",
        "hoverTextColor": "#108E72",
        "padding": "calc((100vw - \${props => props.theme.breakpoints[2]}) / 2)",
        "paddingTop": "2.5em",
        "primary": "#0BA986",
        "primaryColor": "#0BA986",
        "primaryDark": "#11856B",
        "primaryTextColor": "#1E2428",
        "secondary": "#11856B",
        "secondaryBlue": "rgb(81, 123, 162, 1)",
        "secondaryBlueDark": "rgb(81, 118, 142, 1)",
        "secondaryColor": "#1E3D3B",
        "secondaryTextColor": "#283035",
        "tertiaryBackgroundColor": "#F7F7F7",
        "textPrimary": "#1E2428",
        "white": "#FFFFFF",
      },
      "bgPrimary": "#1E2428",
      "bgSecondary": "#1E3D3B",
      "borderTextArea": "#979797",
      "breakpoints": Array [
        "500px",
        "52em",
        "1242px",
      ],
      "colors": Object {
        "bgPrimary": "#1E2428",
        "bgSecondary": "#1E3D3B",
        "borderTextArea": "#979797",
        "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
        "disabledBackgroundColor": "#D6D6D6",
        "disabledTextColor": "#9B9B9B",
        "divider": "#EBEBEB",
        "errorRedColor": "#C03030",
        "hoverTextColor": "#108E72",
        "padding": "calc((100vw - \${props => props.theme.breakpoints[2]}) / 2)",
        "paddingTop": "2.5em",
        "primary": "#0BA986",
        "primaryColor": "#0BA986",
        "primaryDark": "#11856B",
        "primaryTextColor": "#1E2428",
        "secondary": "#11856B",
        "secondaryBlue": "rgb(81, 123, 162, 1)",
        "secondaryBlueDark": "rgb(81, 118, 142, 1)",
        "secondaryColor": "#1E3D3B",
        "secondaryTextColor": "#283035",
        "tertiaryBackgroundColor": "#F7F7F7",
        "textPrimary": "#1E2428",
        "white": "#FFFFFF",
      },
      "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
      "disabledBackgroundColor": "#D6D6D6",
      "disabledTextColor": "#9B9B9B",
      "divider": "#EBEBEB",
      "errorRedColor": "#C03030",
      "fontSizes": Array [
        11,
        13,
        14,
        16,
        18,
        20,
        22,
        28,
        32,
      ],
      "fontWeight": Array [
        300,
        "normal",
        500,
        700,
      ],
      "hoverTextColor": "#108E72",
      "padContent": "
    max-width: 1242px;
    margin-left: auto;
    margin-right: auto;
    @media (min-width: 1242px) {
      min-width: 1242px;
    }
    @media (max-width: 1242px) {
      min-width: 90%;
    }
  ",
      "padding": "calc((100vw - 1242px) / 2)",
      "paddingTop": "2.5em",
      "primary": "#0BA986",
      "primaryColor": "#0BA986",
      "primaryDark": "#11856B",
      "primaryTextColor": "#1E2428",
      "secondary": "#11856B",
      "secondaryBlue": "rgb(81, 123, 162, 1)",
      "secondaryBlueDark": "rgb(81, 118, 142, 1)",
      "secondaryColor": "#1E3D3B",
      "secondaryTextColor": "#283035",
      "space": Array [
        0,
        10,
        15,
        30,
        60,
      ],
      "tertiaryBackgroundColor": "#F7F7F7",
      "textPrimary": "#1E2428",
      "white": "#FFFFFF",
    }
  }
>
  <ChooseArticleContent
    closeModalAction={[MockFunction]}
    confirmButtonAction={[MockFunction]}
    content={
      <div>
        Test
      </div>
    }
    isModalOpen={true}
    setRef={
      [MockFunction] {
        "calls": Array [
          Array [
            <section
              class="ChooseArticleContent__Content-sc-19pnn7n-0 gSWlDE"
            >
              <div
                class="sc-bdVaJa kvGJGg"
              >
                <div>
                  Test
                </div>
              </div>
            </section>,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    title="test"
  >
    <ChooseArticleContent__Content>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "ChooseArticleContent__Content-sc-19pnn7n-0",
              "isStatic": true,
              "lastClassName": "gSWlDE",
              "rules": Array [
                "display:flex;flex-direction:column;overflow-y:auto;width:100%;height:100%;",
              ],
            },
            "displayName": "ChooseArticleContent__Content",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "ChooseArticleContent__Content-sc-19pnn7n-0",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={[Function]}
      >
        <section
          className="ChooseArticleContent__Content-sc-19pnn7n-0 gSWlDE"
        >
          <Stack
            alignItems={
              Array [
                "",
              ]
            }
            gap={30}
            gridAutoFlow={
              Array [
                "",
              ]
            }
            gridTemplateColumns="288px 288px 288px"
            justifyContent={
              Array [
                "",
                "center",
              ]
            }
          >
            <StyledComponent
              alignItems={
                Array [
                  "",
                ]
              }
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "gap": 2,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "kvGJGg",
                    "rules": Array [
                      "box-sizing: border-box;",
                      "display: grid;",
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "displayName": "Stack",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "alignContent": [Function],
                    "alignItems": [Function],
                    "alignSelf": [Function],
                    "display": [Function],
                    "flex": [Function],
                    "flexBasis": [Function],
                    "flexDirection": [Function],
                    "flexGrow": [Function],
                    "flexShrink": [Function],
                    "flexWrap": [Function],
                    "gap": [Function],
                    "gridArea": [Function],
                    "gridAutoColumns": [Function],
                    "gridAutoFlow": [Function],
                    "gridAutoRows": [Function],
                    "gridColumn": [Function],
                    "gridColumnGap": [Function],
                    "gridGap": [Function],
                    "gridRow": [Function],
                    "gridRowGap": [Function],
                    "gridTemplateAreas": [Function],
                    "gridTemplateColumns": [Function],
                    "gridTemplateRows": [Function],
                    "height": [Function],
                    "justifyContent": [Function],
                    "justifyItems": [Function],
                    "justifySelf": [Function],
                    "m": [Function],
                    "margin": [Function],
                    "marginBottom": [Function],
                    "marginLeft": [Function],
                    "marginRight": [Function],
                    "marginTop": [Function],
                    "marginX": [Function],
                    "marginY": [Function],
                    "maxHeight": [Function],
                    "maxWidth": [Function],
                    "mb": [Function],
                    "minHeight": [Function],
                    "minWidth": [Function],
                    "ml": [Function],
                    "mr": [Function],
                    "mt": [Function],
                    "mx": [Function],
                    "my": [Function],
                    "order": [Function],
                    "overflow": [Function],
                    "p": [Function],
                    "padding": [Function],
                    "paddingBottom": [Function],
                    "paddingLeft": [Function],
                    "paddingRight": [Function],
                    "paddingTop": [Function],
                    "paddingX": [Function],
                    "paddingY": [Function],
                    "pb": [Function],
                    "pl": [Function],
                    "pr": [Function],
                    "pt": [Function],
                    "px": [Function],
                    "py": [Function],
                    "size": [Function],
                    "verticalAlign": [Function],
                    "width": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              gap={30}
              gridAutoFlow={
                Array [
                  "",
                ]
              }
              gridTemplateColumns="288px 288px 288px"
              justifyContent={
                Array [
                  "",
                  "center",
                ]
              }
            >
              <div
                className="sc-bdVaJa kvGJGg"
              >
                <div>
                  Test
                </div>
              </div>
            </StyledComponent>
          </Stack>
        </section>
      </StyledComponent>
    </ChooseArticleContent__Content>
  </ChooseArticleContent>
</ThemeProvider>
`;

exports[`components/Modal/ChooseCollectionContent should match snapshot 1`] = `
<ThemeProvider
  theme={
    Object {
      "DEFAULT_CARD_WIDTH": 288,
      "MAIN_BODY_WIDTH": 1242,
      "bg": Object {
        "bgPrimary": "#1E2428",
        "bgSecondary": "#1E3D3B",
        "borderTextArea": "#979797",
        "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
        "disabledBackgroundColor": "#D6D6D6",
        "disabledTextColor": "#9B9B9B",
        "divider": "#EBEBEB",
        "errorRedColor": "#C03030",
        "hoverTextColor": "#108E72",
        "padding": "calc((100vw - \${props => props.theme.breakpoints[2]}) / 2)",
        "paddingTop": "2.5em",
        "primary": "#0BA986",
        "primaryColor": "#0BA986",
        "primaryDark": "#11856B",
        "primaryTextColor": "#1E2428",
        "secondary": "#11856B",
        "secondaryBlue": "rgb(81, 123, 162, 1)",
        "secondaryBlueDark": "rgb(81, 118, 142, 1)",
        "secondaryColor": "#1E3D3B",
        "secondaryTextColor": "#283035",
        "tertiaryBackgroundColor": "#F7F7F7",
        "textPrimary": "#1E2428",
        "white": "#FFFFFF",
      },
      "bgPrimary": "#1E2428",
      "bgSecondary": "#1E3D3B",
      "borderTextArea": "#979797",
      "breakpoints": Array [
        "500px",
        "52em",
        "1242px",
      ],
      "colors": Object {
        "bgPrimary": "#1E2428",
        "bgSecondary": "#1E3D3B",
        "borderTextArea": "#979797",
        "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
        "disabledBackgroundColor": "#D6D6D6",
        "disabledTextColor": "#9B9B9B",
        "divider": "#EBEBEB",
        "errorRedColor": "#C03030",
        "hoverTextColor": "#108E72",
        "padding": "calc((100vw - \${props => props.theme.breakpoints[2]}) / 2)",
        "paddingTop": "2.5em",
        "primary": "#0BA986",
        "primaryColor": "#0BA986",
        "primaryDark": "#11856B",
        "primaryTextColor": "#1E2428",
        "secondary": "#11856B",
        "secondaryBlue": "rgb(81, 123, 162, 1)",
        "secondaryBlueDark": "rgb(81, 118, 142, 1)",
        "secondaryColor": "#1E3D3B",
        "secondaryTextColor": "#283035",
        "tertiaryBackgroundColor": "#F7F7F7",
        "textPrimary": "#1E2428",
        "white": "#FFFFFF",
      },
      "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
      "disabledBackgroundColor": "#D6D6D6",
      "disabledTextColor": "#9B9B9B",
      "divider": "#EBEBEB",
      "errorRedColor": "#C03030",
      "fontSizes": Array [
        11,
        13,
        14,
        16,
        18,
        20,
        22,
        28,
        32,
      ],
      "fontWeight": Array [
        300,
        "normal",
        500,
        700,
      ],
      "hoverTextColor": "#108E72",
      "padContent": "
    max-width: 1242px;
    margin-left: auto;
    margin-right: auto;
    @media (min-width: 1242px) {
      min-width: 1242px;
    }
    @media (max-width: 1242px) {
      min-width: 90%;
    }
  ",
      "padding": "calc((100vw - 1242px) / 2)",
      "paddingTop": "2.5em",
      "primary": "#0BA986",
      "primaryColor": "#0BA986",
      "primaryDark": "#11856B",
      "primaryTextColor": "#1E2428",
      "secondary": "#11856B",
      "secondaryBlue": "rgb(81, 123, 162, 1)",
      "secondaryBlueDark": "rgb(81, 118, 142, 1)",
      "secondaryColor": "#1E3D3B",
      "secondaryTextColor": "#283035",
      "space": Array [
        0,
        10,
        15,
        30,
        60,
      ],
      "tertiaryBackgroundColor": "#F7F7F7",
      "textPrimary": "#1E2428",
      "white": "#FFFFFF",
    }
  }
>
  <_default
    closeModalAction={[MockFunction]}
    confirmButtonAction={[MockFunction]}
    content={
      <div>
        Test
      </div>
    }
    isModalOpen={true}
    setRef={
      [MockFunction] {
        "calls": Array [
          Array [
            <section
              class="ChooseCollectionContent__Content-f9cvh5-0 zEoRC"
            >
              <div
                class="sc-bdVaJa hoKxWk"
                width="100%"
              >
                <div>
                  Test
                </div>
              </div>
            </section>,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    title="test"
  >
    <ChooseCollectionContent__Content>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "ChooseCollectionContent__Content-f9cvh5-0",
              "isStatic": true,
              "lastClassName": "zEoRC",
              "rules": Array [
                "display:flex;flex-diretion:column;overflow-y:auto;width:100%;height:100%;",
              ],
            },
            "displayName": "ChooseCollectionContent__Content",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "ChooseCollectionContent__Content-f9cvh5-0",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={[Function]}
      >
        <section
          className="ChooseCollectionContent__Content-f9cvh5-0 zEoRC"
        >
          <Stack
            gap="30px"
            gridTemplateColumns="288px 288px 288px"
            justifyContent={
              Array [
                "",
                "center",
              ]
            }
            width="100%"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "_foldedDefaultProps": Object {
                    "gap": 2,
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "hoKxWk",
                    "rules": Array [
                      "box-sizing: border-box;",
                      "display: grid;",
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "displayName": "Stack",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "alignContent": [Function],
                    "alignItems": [Function],
                    "alignSelf": [Function],
                    "display": [Function],
                    "flex": [Function],
                    "flexBasis": [Function],
                    "flexDirection": [Function],
                    "flexGrow": [Function],
                    "flexShrink": [Function],
                    "flexWrap": [Function],
                    "gap": [Function],
                    "gridArea": [Function],
                    "gridAutoColumns": [Function],
                    "gridAutoFlow": [Function],
                    "gridAutoRows": [Function],
                    "gridColumn": [Function],
                    "gridColumnGap": [Function],
                    "gridGap": [Function],
                    "gridRow": [Function],
                    "gridRowGap": [Function],
                    "gridTemplateAreas": [Function],
                    "gridTemplateColumns": [Function],
                    "gridTemplateRows": [Function],
                    "height": [Function],
                    "justifyContent": [Function],
                    "justifyItems": [Function],
                    "justifySelf": [Function],
                    "m": [Function],
                    "margin": [Function],
                    "marginBottom": [Function],
                    "marginLeft": [Function],
                    "marginRight": [Function],
                    "marginTop": [Function],
                    "marginX": [Function],
                    "marginY": [Function],
                    "maxHeight": [Function],
                    "maxWidth": [Function],
                    "mb": [Function],
                    "minHeight": [Function],
                    "minWidth": [Function],
                    "ml": [Function],
                    "mr": [Function],
                    "mt": [Function],
                    "mx": [Function],
                    "my": [Function],
                    "order": [Function],
                    "overflow": [Function],
                    "p": [Function],
                    "padding": [Function],
                    "paddingBottom": [Function],
                    "paddingLeft": [Function],
                    "paddingRight": [Function],
                    "paddingTop": [Function],
                    "paddingX": [Function],
                    "paddingY": [Function],
                    "pb": [Function],
                    "pl": [Function],
                    "pr": [Function],
                    "pt": [Function],
                    "px": [Function],
                    "py": [Function],
                    "size": [Function],
                    "verticalAlign": [Function],
                    "width": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              gap="30px"
              gridTemplateColumns="288px 288px 288px"
              justifyContent={
                Array [
                  "",
                  "center",
                ]
              }
              width="100%"
            >
              <div
                className="sc-bdVaJa hoKxWk"
                width="100%"
              >
                <div>
                  Test
                </div>
              </div>
            </StyledComponent>
          </Stack>
        </section>
      </StyledComponent>
    </ChooseCollectionContent__Content>
  </_default>
</ThemeProvider>
`;

exports[`components/Modal/ModalView should match snapshot 1`] = `
<ThemeProvider
  theme={
    Object {
      "DEFAULT_CARD_WIDTH": 288,
      "MAIN_BODY_WIDTH": 1242,
      "bg": Object {
        "bgPrimary": "#1E2428",
        "bgSecondary": "#1E3D3B",
        "borderTextArea": "#979797",
        "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
        "disabledBackgroundColor": "#D6D6D6",
        "disabledTextColor": "#9B9B9B",
        "divider": "#EBEBEB",
        "errorRedColor": "#C03030",
        "hoverTextColor": "#108E72",
        "padding": "calc((100vw - \${props => props.theme.breakpoints[2]}) / 2)",
        "paddingTop": "2.5em",
        "primary": "#0BA986",
        "primaryColor": "#0BA986",
        "primaryDark": "#11856B",
        "primaryTextColor": "#1E2428",
        "secondary": "#11856B",
        "secondaryBlue": "rgb(81, 123, 162, 1)",
        "secondaryBlueDark": "rgb(81, 118, 142, 1)",
        "secondaryColor": "#1E3D3B",
        "secondaryTextColor": "#283035",
        "tertiaryBackgroundColor": "#F7F7F7",
        "textPrimary": "#1E2428",
        "white": "#FFFFFF",
      },
      "bgPrimary": "#1E2428",
      "bgSecondary": "#1E3D3B",
      "borderTextArea": "#979797",
      "breakpoints": Array [
        "500px",
        "52em",
        "1242px",
      ],
      "colors": Object {
        "bgPrimary": "#1E2428",
        "bgSecondary": "#1E3D3B",
        "borderTextArea": "#979797",
        "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
        "disabledBackgroundColor": "#D6D6D6",
        "disabledTextColor": "#9B9B9B",
        "divider": "#EBEBEB",
        "errorRedColor": "#C03030",
        "hoverTextColor": "#108E72",
        "padding": "calc((100vw - \${props => props.theme.breakpoints[2]}) / 2)",
        "paddingTop": "2.5em",
        "primary": "#0BA986",
        "primaryColor": "#0BA986",
        "primaryDark": "#11856B",
        "primaryTextColor": "#1E2428",
        "secondary": "#11856B",
        "secondaryBlue": "rgb(81, 123, 162, 1)",
        "secondaryBlueDark": "rgb(81, 118, 142, 1)",
        "secondaryColor": "#1E3D3B",
        "secondaryTextColor": "#283035",
        "tertiaryBackgroundColor": "#F7F7F7",
        "textPrimary": "#1E2428",
        "white": "#FFFFFF",
      },
      "contentBorder": "1px solid rgba(30, 36, 40, 0.19)",
      "disabledBackgroundColor": "#D6D6D6",
      "disabledTextColor": "#9B9B9B",
      "divider": "#EBEBEB",
      "errorRedColor": "#C03030",
      "fontSizes": Array [
        11,
        13,
        14,
        16,
        18,
        20,
        22,
        28,
        32,
      ],
      "fontWeight": Array [
        300,
        "normal",
        500,
        700,
      ],
      "hoverTextColor": "#108E72",
      "padContent": "
    max-width: 1242px;
    margin-left: auto;
    margin-right: auto;
    @media (min-width: 1242px) {
      min-width: 1242px;
    }
    @media (max-width: 1242px) {
      min-width: 90%;
    }
  ",
      "padding": "calc((100vw - 1242px) / 2)",
      "paddingTop": "2.5em",
      "primary": "#0BA986",
      "primaryColor": "#0BA986",
      "primaryDark": "#11856B",
      "primaryTextColor": "#1E2428",
      "secondary": "#11856B",
      "secondaryBlue": "rgb(81, 123, 162, 1)",
      "secondaryBlueDark": "rgb(81, 118, 142, 1)",
      "secondaryColor": "#1E3D3B",
      "secondaryTextColor": "#283035",
      "space": Array [
        0,
        10,
        15,
        30,
        60,
      ],
      "tertiaryBackgroundColor": "#F7F7F7",
      "textPrimary": "#1E2428",
      "white": "#FFFFFF",
    }
  }
>
  <ModalComponent
    closeModalAction={[MockFunction]}
    confirmButtonAction={[MockFunction]}
    content={
      <div>
        Test
      </div>
    }
    isModalOpen={true}
    title="test"
  >
    <View__ModalContainer
      onClick={[Function]}
      open={true}
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "View__ModalContainer-etmbqn-0",
              "isStatic": false,
              "lastClassName": "iwDYdI",
              "rules": Array [
                "height:100%;width:100%;top:0;left:0;background-color:rgb(30,36,40,0.5);z-index:9001;justify-content:center;align-items:center;position:fixed;display:flex;visibility:",
                [Function],
                ";transition:all 0.2s;animation:",
                [Function],
                " 0.2s linear;",
              ],
            },
            "displayName": "View__ModalContainer",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "View__ModalContainer-etmbqn-0",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        onClick={[Function]}
        open={true}
      >
        <div
          className="View__ModalContainer-etmbqn-0 iwDYdI"
          onClick={[Function]}
          open={true}
        >
          <View__ModalBox
            onClick={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "View__ModalBox-etmbqn-1",
                    "isStatic": false,
                    "lastClassName": "dponvZ",
                    "rules": Array [
                      "background:",
                      [Function],
                      ";border-radius:4px;display:flex;flex-direction:column;padding:",
                      [Function],
                      "px;@media (max-width:500px){height:100%;width:100%;}",
                    ],
                  },
                  "displayName": "View__ModalBox",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "View__ModalBox-etmbqn-1",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
            >
              <div
                className="View__ModalBox-etmbqn-1 dponvZ"
                onClick={[Function]}
              >
                <div>
                  Test
                </div>
              </div>
            </StyledComponent>
          </View__ModalBox>
        </div>
      </StyledComponent>
    </View__ModalContainer>
  </ModalComponent>
</ThemeProvider>
`;
